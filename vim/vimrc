" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()
call pathogen#infect()

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showmatch                     " Highlight matching brackets/braces/parenthesis

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set nowrap                        " Turn off line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set relativenumber  " Show line numbers relative to cursor position

set t_Co=256                    " Use 256 colors
" colorscheme railscasts
set background=dark
" Or use vividchalk
colorscheme railscasts

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Why aren't W and Q mapped?
command WQ wq
command Wq wq
command W w
command Q q

" Bubble single lines
 nmap <Down> [e
 nmap <Up> ]e

" Bubble multiple lines
 vmap <Down> [egv
 vmap <Up> ]egv

" Edit .vimrc
nmap <leader>v :tabedit $MYVIMRC<CR>

" Toggle display of tabs and newline characters
nmap <leader>l :set list!<CR>

" Use textmate characters for tabstop and linending
set listchars=tab:▸\ ,eol:¬,trail:·

" Toggle NERDTree pane
map <leader>n :NERDTreeToggle<CR>

" use jj to get out of insert mode
imap jj <ESC>

" ultisnips snippet configuration, don't use <tab> with YouCompleteMe
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
let g:UltiSnipsListSnippets="<c-e>"

" Copy license into buffer
map <leader>@ :0r ~/.vim/license.txt <CR>

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Set filetype to ruby for thor files
au BufNewFile,BufRead *.thor Cakefile set filetype=ruby

" vim-go plugin settings
let g:go_auto_type_info = 0
"let g:go_fmt_command = "gofmt"
au Filetype go nnoremap <leader>r :GoRun %<CR>
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
au Filetype go nnoremap <leader>gt :GoTest<CR>

" colorcolumn - show column at 80 chars
set colorcolumn=80
hi ColorColumn ctermbg=darkgrey guibg=darkgrey

" Emmet
" Only on html/css
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Tidy up whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Cleanup trailing whitespace after saving certain file types
autocmd BufWritePre *.rb,*.js,*.go :call <SID>StripTrailingWhitespaces()
"function! g:UltiSnips_Complete()
    "call UltiSnips#ExpandSnippet()
    "if g:ulti_expand_res == 0
        "if pumvisible()
            "return "\<C-n>"
        "else
            "call UltiSnips#JumpForwards()
            "if g:ulti_jump_forwards_res == 0
               "return "\<TAB>"
            "endif
        "endif
    "endif
    "return ""
"endfunction

"au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
"inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"
